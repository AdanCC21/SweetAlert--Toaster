@page "/ModificarMateria/{idMateria:int}"

@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components.Routing

@using Servicios;
@using Entidades.Modelos;

@inject MateriaServicios MatSer;
@inject NavigationManager navigationManager;
@inject ToasterServicio Toaster;
@inject SweetAlertServicio SweetAlert;

<!-- Contenedor principal de la página -->
<div class="container">
	<!-- Título de la sección -->
	<h4 class="fw-bold mb-5">Gestión de materias</h4>

	<!-- Fila centrada para el contenido -->
	<div class="row justify-content-center mt-5">
		<!-- Columna con un ancho específico para dispositivos medianos y grandes -->
		<div class="col-md-8 col-lg-6">
			<!-- Tarjeta con sombra y bordes redondeados -->
			<div class="card border-0 shadow-lg rounded-4 overflow-hidden">
				<!-- Encabezado de la tarjeta con fondo azul y texto blanco -->
				<div class="card-header bg-primary text-white">
					<h5 class="card-title mb-0"><i class="bi bi-mortarboard-fill"></i> Modificar materia</h5>
				</div>

				<!-- Cuerpo de la tarjeta -->
				<div class="card-body">
					<!-- Formulario de edición con validación -->
					<EditForm Model="@materia" OnValidSubmit="ModificarMateria" class="needs-validation" novalidate>
						<DataAnnotationsValidator />

						<!-- Campo para la clave de la carrera -->
						<div class="mb-3">
							<label for="claveCarrera" class="form-label"><i class="bi bi-key-fill"></i> Clave de Materia</label>
							<InputText id="claveCarrera" class="form-control form-control-lg" @bind-Value="materia.ClaveMateria" />
							<ValidationMessage For="@(() => materia.ClaveMateria)" class="text-danger small" />
						</div>

						<!-- Campo para el nombre de la carrera -->
						<div class="mb-3">
							<label for="nombreCarrera" class="form-label"><i class="bi bi-receipt"></i> Nombre de Carrera</label>
							<InputText id="nombreCarrera" class="form-control form-control-lg" @bind-Value="materia.NombreMateria" />
							<ValidationMessage For="@(() => materia.NombreMateria)" class="text-danger small" />
						</div>

						<!-- Pie de la tarjeta con botones de acción -->
						<div class="card-footer">
							<div class="form-group">
								<div class="row">
									<div class="col-12 d-flex justify-content-end">
										<!-- Botón para guardar la carrera -->
										<button type="submit" class="btn btn-primary m-3 mt-0 mb-0"> <i class="bi bi-floppy2"></i>&nbsp;Guardar materia </button>
										<!-- Botón para regresar al listado de carreras -->
										<NavLink href="ListarMaterias" class="btn btn-secondary mt-0 mb-0"> <i class="bi bi-arrow-left-circle"></i>&nbsp;Regresar al listado </NavLink>
									</div>
								</div>
							</div>
						</div>
					</EditForm>
				</div>
			</div>
		</div>
	</div>
</div>


@code {
	/// <summary>
	/// Parámetro que recibe el ID de la carrera a editar
	/// </summary>
	[Parameter]
	public int idMateria { get; set; }

	/// <summary>
	/// Modelo que contiene los datos de la carrera que se está editando
	/// </summary>
	private E_Materia materia { get; set; } = new E_Materia();

	/// <summary>
	/// Mensaje para mostrar el resultado de las operaciones al usuario
	/// </summary>
	private string msg = string.Empty;

	/// <summary>
	/// Método que se ejecuta al inicializar el componente para cargar los datos de la carrera
	/// </summary>
	/// <returns>Tarea asincrónica</returns>
	protected override async Task OnInitializedAsync()
	{
		materia = await MatSer.BuscarMateria(idMateria);
		if (materia.IdMateria != idMateria)
		{
			await Toaster.ShowSuccess("Materia no encontrada", "Error");
		}
	}

	private async Task ModificarMateria()
	{
		bool confirm = await SweetAlert.ShowConfirm("Modificar Materia", "Estas a punto de modificar una materia", "warning");
		if (confirm)
		{
			string res = await MatSer.ActualizarMateria(materia.IdMateria, materia);
			if (res.Contains("Exito"))
			{
				msg = "Exito";
				await Toaster.ShowSuccess("La materia se borro exitosamente", "Exito");
				navigationManager.NavigateTo("ListarMaterias");
			}
			else
			{
				msg = "Fallo";
				await Toaster.ShowSuccess(msg, "Error");
			}
		}

	}
}